diff --git a/include/image-commands.mk b/include/image-commands.mk
index ac3f305362..fa84835f63 100644
--- a/include/image-commands.mk
+++ b/include/image-commands.mk
@@ -686,6 +686,18 @@ define Build/sysupgrade-tar
 		$@
 endef
 
+define Build/header-ubi-factory
+	$(TOPDIR)/scripts/header-ubi-factory.py \
+		--create \
+		--device-name "$(OEM_DEVICE)" \
+		--device-ver "$(OEM_HWVER)" \
+		--special-ids "$(OEM_IDS)" \
+		--version "$(OEM_FWVER)" \
+		--fwimage "$@" \
+		"$(@).new"
+	@mv "$(@).new" "$@"
+endef
+
 define Build/tplink-image-2022
 	$(TOPDIR)/scripts/tplink-mkimage-2022.py  \
 		--create $@.new \
@@ -816,3 +828,44 @@ define Build/zyxel-ras-image
 			$(if $(findstring separate-kernel,$(word 1,$(1))),-k $(IMAGE_KERNEL)) \
 		&& mv $@.new $@
 endef
+
+define Build/uboot-kernel-bundle
+    $(STAGING_DIR_HOST)/bin/mkimage -A arm -T standalone \
+	-C none -n "seconduboot" \
+	-e 0x41e00000 \
+	-d $(STAGING_DIR_IMAGE)/$1-u-boot.bin $(KDIR)/second-uboot.bin
+	
+	rm -rf $(KDIR)/fakefs $(KDIR)/dummy-rootfs.squashfs
+	mkdir $(KDIR)/fakefs
+	$(STAGING_DIR_HOST)/bin/mksquashfs4 \
+		$(KDIR)/fakefs $(KDIR)/dummy-rootfs.squashfs \
+		-nopad -noappend -root-owned
+	
+	@echo '[uboot]' > $(KDIR)/ubinize.cfg
+	@echo 'mode=ubi' >> $(KDIR)/ubinize.cfg
+	@echo 'image=$(KDIR)/second-uboot.bin' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_id=0' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_type=static' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_name=uboot' >> $(KDIR)/ubinize.cfg
+	@echo '[kernel]' >> $(KDIR)/ubinize.cfg
+	@echo 'mode=ubi' >> $(KDIR)/ubinize.cfg
+	@echo 'image=$(KDIR_TMP)/$(KERNEL_INITRAMFS_IMAGE)' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_id=1' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_type=static' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_name=kernel' >> $(KDIR)/ubinize.cfg
+	@echo '[rootfs]' >> $(KDIR)/ubinize.cfg
+	@echo 'mode=ubi' >> $(KDIR)/ubinize.cfg
+	@echo 'image=$(KDIR)/dummy-rootfs.squashfs' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_id=2' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_type=static' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_name=rootfs' >> $(KDIR)/ubinize.cfg
+	@echo 'vol_flags=autoresize' >> $(KDIR)/ubinize.cfg
+
+	$(STAGING_DIR_HOST)/bin/ubinize \
+		-o $@.tmp \
+		-m $(PAGESIZE) -p $(BLOCKSIZE:%k=%KiB) $(UBINIZE_OPTS) \
+		$(KDIR)/ubinize.cfg
+
+	cat $@.tmp >> $@
+	rm $@.tmp
+endef
\ No newline at end of file
diff --git a/package/boot/uboot-mediatek/Makefile b/package/boot/uboot-mediatek/Makefile
index 7c6a19e5a7..c8b1c4697e 100644
--- a/package/boot/uboot-mediatek/Makefile
+++ b/package/boot/uboot-mediatek/Makefile
@@ -653,6 +653,18 @@ define U-Boot/mt7986_netcore_n60-pro
   DEPENDS:=+trusted-firmware-a-mt7986-spim-nand-ddr4
 endef
 
+define U-Boot/mt7986_tplink_archer-ax80
+  NAME:=TP-LINK ARCHER AX80V1 (Stock)
+  BUILD_SUBTARGET:=filogic
+  UBOOT_CONFIG:=mt7986_tplink_archer-ax80
+  BUILD_DEVICES:=tplink_archer-ax80-v1
+  UBOOT_IMAGE:=u-boot.bin
+  BL2_BOOTDEV:=spim-nand
+  BL2_SOC:=mt7986
+  BL2_DDRTYPE:=ddr3
+  DEPENDS:=+trusted-firmware-a-mt7986-spim-nand-ddr3
+endef
+
 define U-Boot/mt7986_tplink_tl-xdr4288
   NAME:=TP-LINK TL-XDR4288
   BUILD_SUBTARGET:=filogic
@@ -937,6 +949,7 @@ UBOOT_TARGETS := \
 	mt7986_mercusys_mr90x-v1 \
 	mt7986_netcore_n60 \
 	mt7986_netcore_n60-pro \
+	mt7986_tplink_archer-ax80 \
 	mt7986_tplink_tl-xdr4288 \
 	mt7986_tplink_tl-xdr6086 \
 	mt7986_tplink_tl-xdr6088 \
diff --git a/package/boot/uboot-mediatek/patches/461-add-tplink-archer-ax80-v1.patch b/package/boot/uboot-mediatek/patches/461-add-tplink-archer-ax80-v1.patch
new file mode 100644
index 0000000000..fb53b91a10
--- /dev/null
+++ b/package/boot/uboot-mediatek/patches/461-add-tplink-archer-ax80-v1.patch
@@ -0,0 +1,304 @@
+--- /dev/null
++++ b/configs/mt7986_tplink_archer-ax80_defconfig
+@@ -0,0 +1,115 @@
++CONFIG_ARM=y
++CONFIG_SYS_HAS_NONCACHED_MEMORY=y
++CONFIG_POSITION_INDEPENDENT=y
++CONFIG_ARCH_MEDIATEK=y
++CONFIG_TEXT_BASE=0x41e00000
++CONFIG_SYS_MALLOC_F_LEN=0x4000
++CONFIG_NR_DRAM_BANKS=1
++CONFIG_ENV_SIZE=0x20000
++CONFIG_ENV_OFFSET=0x0
++CONFIG_DEFAULT_DEVICE_TREE="mt7986a-tplink_archer_ax80-v1"
++CONFIG_TARGET_MT7986=y
++CONFIG_SYS_LOAD_ADDR=0x46000000
++CONFIG_DEBUG_UART_BASE=0x11002000
++CONFIG_DEBUG_UART_CLOCK=40000000
++CONFIG_PCI=y
++CONFIG_DEBUG_UART=y
++CONFIG_SYS_MEMTEST_START=0x40000000
++CONFIG_SYS_MEMTEST_END=0x41000000
++CONFIG_FIT=y
++CONFIG_USE_BOOTARGS=y
++CONFIG_BOOTARGS="console=ttyS0,115200n1 loglevel=8 earlycon=uart8250,mmio32,0x11002000 init=/etc/preinit"
++CONFIG_DEFAULT_FDT_FILE="mediatek/mt7986a-tplink_archer_ax80-v1.dtb"
++CONFIG_LOGLEVEL=7
++CONFIG_LOG=y
++CONFIG_SYS_PROMPT="MT7986> "
++CONFIG_CMD_CPU=y
++CONFIG_CMD_LICENSE=y
++CONFIG_CMD_BOOTMENU=y
++CONFIG_CMD_ASKENV=y
++CONFIG_CMD_MEMTEST=y
++CONFIG_CMD_DM=y
++CONFIG_CMD_DHCP=y
++CONFIG_CMD_GPIO=y
++CONFIG_CMD_MTD=y
++CONFIG_CMD_PART=y
++CONFIG_CMD_SF_TEST=y
++CONFIG_CMD_TFTPSRV=y
++CONFIG_CMD_RARP=y
++CONFIG_CMD_SNTP=y
++CONFIG_CMD_LINK_LOCAL=y
++CONFIG_CMD_PING=y
++CONFIG_CMD_PXE=y
++CONFIG_CMD_CACHE=y
++CONFIG_CMD_PSTORE=y
++CONFIG_CMD_PSTORE_MEM_ADDR=0x42ff0000
++CONFIG_CMD_SMC=y
++CONFIG_MTDIDS_DEFAULT="spi-nand0=spi-nand0"
++CONFIG_MTDPARTS_DEFAULT="spi-nand0:2M(boot),1M(u-boot-env),50M(ubi0),50M(ubi1),8M(userconfig),4M(tp_data),8M(mali_data)"
++CONFIG_CMD_UBI=y
++CONFIG_CMD_UBI_RENAME=y
++CONFIG_OF_EMBED=y
++CONFIG_ENV_OVERWRITE=y
++CONFIG_ENV_IS_IN_UBI=y
++CONFIG_ENV_IS_IN_MTD=y
++CONFIG_ENV_SIZE_REDUND=0x80000
++CONFIG_MTD_UBI_FASTMAP=y
++CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG=y
++CONFIG_USE_IPADDR=y
++CONFIG_IPADDR="192.168.1.1"
++CONFIG_USE_SERVERIP=y
++CONFIG_SERVERIP="192.168.1.254"
++CONFIG_NET_RANDOM_ETHADDR=y
++CONFIG_REGMAP=y
++CONFIG_SYSCON=y
++CONFIG_CLK=y
++CONFIG_LED=y
++CONFIG_LED_BLINK=y
++CONFIG_LED_GPIO=y
++CONFIG_MEMORY=y
++CONFIG_MTD=y
++CONFIG_DM_MTD=y
++CONFIG_MTD_CONCAT=y
++CONFIG_MTD_BLOCK=y
++CONFIG_MTD_SPI_NAND=y
++CONFIG_DM_SPI_FLASH=y
++CONFIG_BOOTDEV_SPI_FLASH=y
++CONFIG_SPI_FLASH_ATMEL=y
++CONFIG_SPI_FLASH_EON=y
++CONFIG_SPI_FLASH_GIGADEVICE=y
++CONFIG_SPI_FLASH_ISSI=y
++CONFIG_SPI_FLASH_MACRONIX=y
++CONFIG_SPI_FLASH_PUYA=y
++CONFIG_SPI_FLASH_SILICONKAISER=y
++CONFIG_SPI_FLASH_SPANSION=y
++CONFIG_SPI_FLASH_S28HX_T=y
++CONFIG_SPI_FLASH_STMICRO=y
++CONFIG_SPI_FLASH_MT35XU=y
++CONFIG_SPI_FLASH_SST=y
++CONFIG_SPI_FLASH_WINBOND=y
++CONFIG_SPI_FLASH_XMC=y
++CONFIG_SPI_FLASH_XTX=y
++CONFIG_SPI_FLASH_ZBIT=y
++CONFIG_SPI_FLASH_DATAFLASH=y
++CONFIG_SPI_FLASH_MTD=y
++CONFIG_PHY_FIXED=y
++CONFIG_MEDIATEK_ETH=y
++CONFIG_PCIE_MEDIATEK=y
++CONFIG_PHY=y
++CONFIG_PINCTRL=y
++CONFIG_PINCONF=y
++CONFIG_PINCTRL_MT7981=y
++CONFIG_POWER_DOMAIN=y
++CONFIG_MTK_POWER_DOMAIN=y
++CONFIG_DM_PWM=y
++CONFIG_PWM_MTK=y
++CONFIG_RAM=y
++CONFIG_DM_SERIAL=y
++CONFIG_SERIAL_RX_BUFFER=y
++CONFIG_MTK_SERIAL=y
++CONFIG_SPI=y
++CONFIG_DM_SPI=y
++CONFIG_MTK_SPIM=y
++CONFIG_HEXDUMP=y
++CONFIG_USE_DEFAULT_ENV_FILE=y
++CONFIG_DEFAULT_ENV_FILE="defenvs/tplink_archer_ax80_env"
+--- /dev/null
++++ b/arch/arm/dts/mt7986a-tplink_archer_ax80-v1.dts
+@@ -0,0 +1,171 @@
++// SPDX-License-Identifier: GPL-2.0
++/*
++* Copyright (c) 2021 MediaTek Inc.
++* Author: Sam Shih <sam.shih@mediatek.com>
++*/
++
++/dts-v1/;
++#include "mt7986.dtsi"
++#include <dt-bindings/gpio/gpio.h>
++#include <dt-bindings/input/linux-event-codes.h>
++
++/ {
++	#address-cells = <1>;
++	#size-cells = <1>;
++	model = "TP-Link Archer AX80V1";
++	compatible = "mediatek,mt7986", "mediatek,mt7986-rfb";
++
++	chosen {
++		stdout-path = &uart0;
++		tick-timer = &timer0;
++	};
++	
++	memory@40000000 {
++		device_type = "memory";
++		reg = <0x40000000 0x20000000>;
++	};
++	
++	keys {
++		compatible = "gpio-keys";
++		
++		reset {
++			label = "reset";
++			linux,code = <KEY_RESTART>;
++			gpios = <&pio 7 GPIO_ACTIVE_LOW>;
++			
++		};
++	};
++	
++};
++
++&uart0 {
++	mediatek,force-highspeed;
++	status = "okay";
++};
++
++&uart1 {
++	pinctrl-names = "default";
++	pinctrl-0 = <&uart1_pins>;
++	status = "disabled";
++};
++
++&eth {
++	status = "okay";
++	mediatek,gmac-id = <0>;
++	phy-mode = "2500base-x";
++	mediatek,switch = "mt7531";
++	reset-gpios = <&pio 5 GPIO_ACTIVE_HIGH>;
++	
++	fixed-link {
++		speed = <2500>;
++		full-duplex;
++	};
++};
++
++&pio {
++	spi_flash_pins: spi0-pins-func-1 {
++		mux {
++			function = "flash";
++			groups = "spi0", "spi0_wp_hold";
++		};
++		
++		conf-pu {
++			pins = "SPI2_CS", "SPI2_HOLD", "SPI2_WP";
++			drive-strength = <MTK_DRIVE_4mA>;
++			bias-pull-up = <0>;
++		};
++		
++		conf-pd {
++			pins = "SPI2_CLK", "SPI2_MOSI", "SPI2_MISO";
++			drive-strength = <MTK_DRIVE_4mA>;
++			bias-pull-down = <0>;
++		};
++	};
++	
++	spic_pins: spi1-pins-func-1 {
++		mux {
++			function = "spi";
++			groups = "spi1_2";
++		};
++	};
++	
++	uart1_pins: spi1-pins-func-3 {
++		mux {
++			function = "uart";
++			groups = "uart1_2";
++		};
++	};
++	
++};
++
++&spi0 {
++	#address-cells = <1>;
++	#size-cells = <0>;
++	pinctrl-names = "default";
++	pinctrl-0 = <&spi_flash_pins>;
++	status = "okay";
++	must_tx;
++	enhance_timing;
++	dma_ext;
++	ipm_design;
++	support_quad;
++	tick_dly = <1>;
++	sample_sel = <0>;
++
++	spi_nand@1 {
++		compatible = "spi-nand";
++		reg = <1>;
++		spi-max-frequency = <52000000>;
++
++		partitions {
++			compatible = "fixed-partitions";
++			#address-cells = <1>;
++			#size-cells = <1>;
++		
++			partition@0 {
++				label = "boot";
++				reg = <0x00000 0x0200000>;
++				read-only;
++			};
++			
++			partition@200000 {
++				label = "u-boot-env";
++				reg = <0x0200000 0x0100000>;
++			};
++			
++			partition@300000 {
++				label = "ubi0";
++				reg = <0x300000 0x3200000>;
++			};
++			
++			partition@3500000 {
++				label = "ubi1";
++				reg = <0x3500000 0x3200000>;
++			};
++			
++			partition@6700000 {
++				label = "userconfig";
++				reg = <0x6700000 0x800000>;
++				
++			};
++			
++			partition@6f00000 {
++				label = "tp_data";
++				reg = <0x6f00000 0x400000>;
++				
++			};
++			
++			partition@7300000 {
++				label = "mali_data";
++				reg = <0x7300000 0x800000>;
++				
++			};
++			
++		};
++		
++	};
++};
++
++&watchdog {
++	status = "disabled";
++};
+--- /dev/null
++++ b/defenvs/tplink_archer_ax80_env
+@@ -0,0 +1,8 @@
++ipaddr=192.168.1.1
++serverip=192.168.1.254
++loadaddr=0x46000000
++autoboot=1
++bootcmd=ubi part ubi0; ubi read ${loadaddr} kernel; bootm ${loadaddr}
++mtdids=spi-nand0=spi-nand0
++mtdparts=spi-nand0:2M(boot),1M(u-boot-env),50M(ubi0),50M(ubi1),8M(userconfig),4M(tp_data),8M(mali_data)
++tp_boot_idx=0
diff --git a/scripts/tplink-mkimage-ubi.py b/scripts/tplink-mkimage-ubi.py
new file mode 100755
index 0000000000..bbeeecf1bb
--- /dev/null
+++ b/scripts/header-ubi-factory.py
@@ -0,0 +1,246 @@
+#!/usr/bin/env python3
+#
+# SPDX-License-Identifier: GPL-2.0-or-later
+#
+# header-ubi-factory.py: Creates TP-Link firmware image (Header+UBI)
+# for TP-Link Archer AX80V1, but perhaps may work on other devices.
+#
+# Copyright © 2025 Sergey Shlukov <ichizakurain@gmail.com>
+#
+
+import argparse
+import datetime
+import hashlib
+import os
+import random
+import struct
+import tempfile
+from typing import Optional, List, Tuple
+
+HEADER_SIZE = 0x1014
+MODULE_HEADER_SIZE = 0x2C
+
+MD5_KEY = bytes.fromhex("7a2b15ed9b98596de504ab44ac2a9f4e")
+
+UPGRADE_HEADER_MAGIC = bytes.fromhex("aa554c5e831f534ba1f8f7c918df8fbf7da155aa")
+TP_HEADER_MAGIC = bytes.fromhex("aa559dd1a8c88331c969fbbfbcf0d43270c755aa")
+
+SIGNATURE_DATA = bytes.fromhex(
+    "ae40e869f0a150cee9a8d0330ca828b7fb27b1a2a50a55510dbd74c2461123f2"
+    "20ec7aa8956893399698c6a7eae2b0d6494cd7cc4f6d9543418988b655866237"
+    "dcc2ead8b800cdcbdc6a991dd6c08839fdef1fe7850fcf57d8f78fc6627f7a6a"
+    "7bfec686e87fb7a9650d6a061238fd58130bcb72c7bbef06375ce1844463"
+)
+
+
+def create_firmware_id(input_data: str) -> str:
+    return hashlib.md5(input_data.encode("ascii")).hexdigest().upper()
+
+
+def format_support_string(support_text: str) -> str:
+    if "\n" in support_text and "product_name:" in support_text:
+        return support_text
+
+    if "SupportList:" not in support_text:
+        support_text = "SupportList:\n" + support_text
+
+    support_text = " ".join(support_text.split())
+    support_text = support_text.replace("} {", "}\n{")
+    support_text = support_text.replace("SupportList:", "SupportList:\n")
+    support_text = support_text.replace("SupportList:\n ", "SupportList:\n")
+
+    if not support_text.endswith("\n"):
+        support_text += "\n"
+
+    return support_text
+
+
+def create_support_list(
+    device_name: str, device_ver: str, special_ids: list[str]
+) -> str:
+    items = [
+        f"{{product_name:{device_name},product_ver:{device_ver},special_id:{sid}}}"
+        for sid in special_ids
+    ]
+    return "SupportList:\n" + "\n".join(items) + "\n"
+
+
+def create_version_string(
+    version: str = "1.1.2",
+    build_date: str = "20240126",
+    release_num: str = "68209",
+    fw_id: str = "",
+) -> str:
+    return f"soft_ver:{version} Build {build_date} rel.{release_num}\nfw_id:{fw_id}\n\n"
+
+
+def create_header(total_size: int, fw_id: Optional[str] = None) -> bytearray:
+    header = bytearray([0xFF] * HEADER_SIZE)
+    header[0:4] = struct.pack(">I", total_size)
+    header[4:20] = MD5_KEY
+
+    header[0x14:0x134] = bytes(0x134 - 0x14)
+    header[0x134:0x136] = struct.pack("<H", 0x0100)
+    header[0x136:0x136 + len(UPGRADE_HEADER_MAGIC)] = UPGRADE_HEADER_MAGIC
+    header[0x14A:0x152] = bytes(0x152 - 0x14A)
+    header[0x152:0x152 + len(SIGNATURE_DATA)] = SIGNATURE_DATA
+    header[0x1D2:0x202] = bytes(0x202 - 0x1D2)
+    header[0x202:0x204] = struct.pack("<H", 0x0100)
+    header[0x204:0x204 + len(TP_HEADER_MAGIC)] = TP_HEADER_MAGIC
+
+    if fw_id:
+        fw_id_bytes = fw_id.encode("ascii")
+        header[0x2A8:0x2A8 + len(fw_id_bytes)] = fw_id_bytes
+
+    return header
+
+
+def create_module_files(
+    support: str,
+    version: Optional[str] = None,
+    build_date: Optional[str] = None,
+    release_num: Optional[str] = None,
+    fw_id: Optional[str] = None,
+) -> list[tuple[str, str]]:
+    temp_dir = tempfile.mkdtemp(prefix="temp_modules_")
+
+    support_path = os.path.join(temp_dir, "support-list.txt")
+    with open(support_path, "w", encoding="ascii") as f:
+        f.write(format_support_string(support))
+
+    version_path = os.path.join(temp_dir, "soft-version.txt")
+    with open(version_path, "w", encoding="ascii") as f:
+        f.write(
+            create_version_string(
+                version or "1.1.3",
+                build_date or "20240126",
+                release_num or "68209",
+                fw_id or "",
+            )
+        )
+
+    return [("support-list", support_path), ("soft-version", version_path)]
+
+
+def create_modules_buffer(module_files: list[tuple[str, str]]) -> bytearray:
+    buffer = bytearray()
+    total_size = 0
+
+    for idx, (module_name, file_path) in enumerate(module_files):
+        with open(file_path, "rb") as f:
+            file_content = f.read()
+            file_size = len(file_content)
+
+        module_header = bytearray(MODULE_HEADER_SIZE)
+
+        module_name_bytes = module_name.encode("ascii").ljust(32, b"\0")
+        module_header[0:32] = module_name_bytes
+
+        content_offset = total_size + MODULE_HEADER_SIZE
+        module_header[32:36] = struct.pack(">I", content_offset)
+
+        if idx == len(module_files) - 1:
+            next_module_offset = 0
+        else:
+            next_module_offset = total_size + MODULE_HEADER_SIZE + file_size
+        module_header[36:40] = struct.pack(">I", next_module_offset)
+        module_header[40:44] = struct.pack(">I", file_size)
+        total_size += MODULE_HEADER_SIZE + file_size
+
+        buffer.extend(module_header)
+        buffer.extend(file_content)
+
+    return buffer
+
+
+def build_firmware_image(
+    output_image: str,
+    support: str,
+    fwimage_path: Optional[str] = None,
+    version: Optional[str] = None,
+    device_name: Optional[str] = None,
+    device_ver: Optional[str] = None,
+    special_ids: Optional[list[str]] = None,
+) -> None:
+    build_date = datetime.datetime.now().strftime("%Y%m%d")
+    release_num = str(random.randint(10000, 99999))
+    version = version or "1.1.3"
+
+    input_data = f"{version}-{device_name or 'Generic'}"
+    fw_id = create_firmware_id(input_data)
+
+    if device_name and device_ver and special_ids:
+        support_str = create_support_list(device_name, device_ver, special_ids)
+    else:
+        support_str = support
+
+    module_files = create_module_files(
+        support_str, version, build_date, release_num, fw_id
+    )
+    modules_buffer = create_modules_buffer(module_files)
+
+    fwimage_data = b""
+    if fwimage_path:
+        with open(fwimage_path, "rb") as f:
+            fwimage_data = f.read()
+
+    total_size = HEADER_SIZE + len(modules_buffer) + len(fwimage_data)
+    image = bytearray()
+    image.extend(create_header(total_size, fw_id))
+    image.extend(modules_buffer)
+    image.extend(fwimage_data)
+
+    image[4:20] = hashlib.md5(image[4:]).digest()
+
+    with open(output_image, "wb") as f:
+        f.write(image)
+
+    for _, path in module_files:
+        try:
+            os.remove(path)
+        except Exception:
+            pass
+    try:
+        os.rmdir(os.path.dirname(module_files[0][1]))
+    except Exception:
+        pass
+
+
+def main() -> None:
+    parser = argparse.ArgumentParser(
+        description="Factory Ubi Header Creation Tool"
+    )
+    parser.add_argument("--create", action="store_true", help="Create image")
+    parser.add_argument("image", type=str, help="Output image name")
+    parser.add_argument("--support", type=str, default="", help="Suppor-list string")
+    parser.add_argument("--fwimage", type=str, help="Fwimage file")
+    parser.add_argument("--version", type=str, help="Firmware version")
+    parser.add_argument("--device-name", type=str, help="Device name")
+    parser.add_argument("--device-ver", type=str, help="Device version")
+    parser.add_argument(
+        "--special-ids", type=str, help="Comma separated list of special_ids"
+    )
+    parser.add_argument(
+        "--outputprefix", type=str, default=".", help="Output file directory"
+    )
+
+    args = parser.parse_args()
+
+    if args.create:
+        output_file = os.path.join(args.outputprefix, args.image)
+        build_firmware_image(
+            output_file,
+            args.support,
+            args.fwimage,
+            args.version,
+            args.device_name,
+            args.device_ver,
+            args.special_ids.split(",") if args.special_ids else None,
+        )
+    else:
+        print("No image creation mode specified (--create).")
+        parser.print_help()
+
+
+if __name__ == "__main__":
+    main()
\ No newline at end of file
diff --git a/target/linux/mediatek/image/Makefile b/target/linux/mediatek/image/Makefile
index 668d9a8cb0..46c789fd3d 100644
--- a/target/linux/mediatek/image/Makefile
+++ b/target/linux/mediatek/image/Makefile
@@ -6,7 +6,8 @@
 include $(TOPDIR)/rules.mk
 include $(INCLUDE_DIR)/image.mk
 
-DEVICE_VARS += NETGEAR_ENC_MODEL NETGEAR_ENC_REGION NETGEAR_ENC_HW_ID_LIST NETGEAR_ENC_MODEL_LIST
+DEVICE_VARS += NETGEAR_ENC_MODEL NETGEAR_ENC_REGION NETGEAR_ENC_HW_ID_LIST NETGEAR_ENC_MODEL_LIST \
+ OEM_DEVICE OEM_IDS OEM_HWER OEM_FWVER
 
 loadaddr-$(CONFIG_TARGET_mediatek_mt7622) := 0x44000000
 loadaddr-$(CONFIG_TARGET_mediatek_mt7623) := 0x80008000
diff --git a/target/linux/mediatek/image/filogic.mk b/target/linux/mediatek/image/filogic.mk
index 1dc5698034..1e8eee0721 100644
--- a/target/linux/mediatek/image/filogic.mk
+++ b/target/linux/mediatek/image/filogic.mk
@@ -1695,6 +1695,12 @@ define Device/tplink_archer-ax80-v1
   BLOCKSIZE := 128k
   PAGESIZE := 2048
   IMAGE_SIZE := 51200k
+  IMAGES += webui-factory.bin
+  IMAGE/webui-factory.bin := uboot-kernel-bundle mt7986_tplink_archer-ax80 | pad-to 128k | header-ubi-factory
+    TPLINK_DEVICE := Archer AX80
+    TPLINK_IDS := 55530000,43410000,52550000
+    TPLINK_VERSION := 1.0.0
+    TPLINK_FWVER := 1.1.3
   IMAGE/sysupgrade.bin := sysupgrade-tar | append-metadata
 endef
 TARGET_DEVICES += tplink_archer-ax80-v1
